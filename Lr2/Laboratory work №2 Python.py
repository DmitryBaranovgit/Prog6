# -*- coding: utf-8 -*-
"""Лр2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M__4E12Qr0DoZ0nVGxzgUv6DUV6TJM0G

Баранов Д.А. ИВТ 2.1.

Лабораторная работа №2
"""

import pandas as pd
import numpy as np
from collections import Counter

# Загрузка данных
file_path = '/content/train.csv'
data = pd.read_csv(file_path)

# Задача 1: Количество мужчин и женщин на параходе
men_count = data[data['Sex'] == 'male'].shape[0]
women_count = data[data['Sex'] == 'female'].shape[0]
print(men_count, women_count)

# Задача 2: Количество пассажиров, загрузившихся на корабль в разных портах
embarked_counts = data['Embarked'].value_counts()
print(embarked_counts.get('S', 0), embarked_counts.get('C', 0), embarked_counts.get('Q', 0))

# Задача 3: Доля погибших на параходе
survived_count = data['Survived'].sum()
died_count = data.shape[0] - survived_count
died_percentage = (died_count / data.shape[0]) * 100
print(died_count, round(died_percentage, 2))

# Задача 4: Доля пассажиров по классам
class_counts = data['Pclass'].value_counts(normalize = True) * 100
print(round(class_counts.get(1, 0), 2), round(class_counts.get(2, 0), 2), round(class_counts.get(3, 0), 2))

# Задача 5: Коэффициент корреляции Пирсона между SibSp и Parch
correlation_sibsp_parch = data['SibSp'].corr(data['Parch'])
print(round(correlation_sibsp_parch, 2))

# Задача 6: Корреляция с параметром Survived
correlation_age_survived = data['Age'].corr(data['Survived'])
correlation_sex_survived = data['Sex'].map({'male': 0, 'female': 1}).corr(data['Survived'])
correlation_class_survived = data['Pclass'].corr(data['Survived'])
print(round(correlation_age_survived, 2))
print(round(correlation_sex_survived, 2))
print(round(correlation_class_survived, 2))

# Задача 7: Возраст
mean_age = data['Age'].mean()
median_age = data['Age'].median()
min_age = data['Age'].min()
max_age = data['Age'].max()
print(round(mean_age, 2), median_age, min_age, max_age)

# Задача 8: Цена за билет
mean_fare = data['Fare'].mean()
median_fare = data['Fare'].median()
min_fare = data['Fare'].min()
max_fare = data['Fare'].max()
print(round(mean_fare, 2), median_fare, min_fare, max_fare)

# Функция для извлечения имени
def extract_first_name(name, sex):
  try:
    title_and_name = name.split(',')[1].split('.')[1].strip()

    if sex == 'female' and '(' in title_and_name:
      first_name = title_and_name.split('(')[1].split(')')[0].split()[0]
    else:
      first_name = title_and_name.split()[0]
    return first_name
  except IndexError:
    return None

# Задача 9: Популярное мужское имя на параходе
male_names = data[data['Sex'] == 'male']['Name'].dropna().apply(lambda name: extract_first_name(name, 'male'))
most_common_male_name = Counter(male_names).most_common(1)[0][0]
print(most_common_male_name)

# Задача 10: Популярные имена среди взросылх старше 15 лет
adults = data[data['Age'] > 15]

# Извлечение мужских имён
male_names_adults = adults[adults['Sex'] == 'male']['Name'].dropna().apply(lambda name: extract_first_name(name, 'male'))
most_common_male_name_adults = Counter(male_names_adults).most_common(1)[0][0]

# Извлечение жекнских имён
female_names_adults = adults[adults['Sex'] == 'female']['Name'].dropna().apply(lambda name: extract_first_name(name, 'female'))
most_common_female_name_adults = Counter(female_names_adults).most_common(1)[0][0]

print(most_common_male_name_adults, most_common_female_name_adults)